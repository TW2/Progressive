/*
 * Copyright (C) 2023 util2
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.wingate.progressive;

import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Mixer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.wingate.progressive.core.CaptureAV;
import org.wingate.progressive.core.Configuration;
import org.wingate.progressive.core.FileType;
import org.wingate.progressive.core.IO;

/**
 *
 * @author util2
 */
public class MainFrame extends javax.swing.JFrame {

    private final DefaultComboBoxModel dcbmFileType = new DefaultComboBoxModel();
    private final DefaultComboBoxModel dcbmMixer = new DefaultComboBoxModel();
    
    private CaptureAV cAV = null;
    
    private Rectangle r = new Rectangle(1280, 720);
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        cbFileType.setModel(dcbmFileType);
        for(FileType ft : FileType.values()){
            dcbmFileType.addElement(ft);
        }
        
        cbDevice.setModel(dcbmMixer);
        boolean seenCapture = false;
        for(Mixer.Info info : AudioSystem.getMixerInfo()){
            String name = info.getName().toLowerCase();
            
            if(name.startsWith("port ") == false && seenCapture){
                dcbmMixer.addElement(info.getName());
            }
            
            if(!seenCapture && name.contains("capture")){
                seenCapture = true;
            }
        }
        cbDevice.setSelectedIndex(0);
        
        // En dernier, on charge la configuration, si elle existe
        File configFile = new File("config.txt");
        if(configFile.exists()){
            Configuration c = IO.loadConfiguration(configFile.getPath());
            cbFileType.setSelectedItem(c.getFileType());
            tfFolder.setText(c.getFolder());
            tfFile.setText(c.getFilename());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcFolder = new javax.swing.JFileChooser();
        paramsPanel = new javax.swing.JPanel();
        lblFileType = new javax.swing.JLabel();
        cbFileType = new javax.swing.JComboBox<>();
        lblFolder = new javax.swing.JLabel();
        tfFolder = new javax.swing.JTextField();
        btnFolder = new javax.swing.JButton();
        lblFile = new javax.swing.JLabel();
        tfFile = new javax.swing.JTextField();
        lblDevice = new javax.swing.JLabel();
        cbDevice = new javax.swing.JComboBox<>();
        btnQuit = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnSet = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        paramsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Propriétés de la capture"));

        lblFileType.setText("Type de fichier final : ");

        cbFileType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblFolder.setText("Dossier du fichier final : ");

        btnFolder.setText("Définir le dossier");
        btnFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFolderActionPerformed(evt);
            }
        });

        lblFile.setText("Nom du fichier final : ");

        lblDevice.setText("Périphérique audio : ");

        cbDevice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout paramsPanelLayout = new javax.swing.GroupLayout(paramsPanel);
        paramsPanel.setLayout(paramsPanelLayout);
        paramsPanelLayout.setHorizontalGroup(
            paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFolder)
                    .addComponent(lblFileType)
                    .addComponent(lblFile)
                    .addComponent(lblDevice))
                .addGap(24, 24, 24)
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFile)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paramsPanelLayout.createSequentialGroup()
                        .addComponent(cbFileType, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(tfFolder, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbDevice, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        paramsPanelLayout.setVerticalGroup(
            paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFileType)
                    .addComponent(cbFileType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFolder)
                    .addComponent(tfFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFile)
                    .addComponent(tfFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDevice)
                    .addComponent(cbDevice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnQuit.setText("Quitter");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        btnStart.setText("Commencer l'enregistrement");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Arrêter l'enregistrement");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnSet.setText("Définir la zone d'enregistrement");
        btnSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paramsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addComponent(btnQuit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paramsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQuit)
                    .addComponent(btnStart)
                    .addComponent(btnStop)
                    .addComponent(btnSet))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        // Effectuer une sauvegarde des paramètres
        Configuration c = new Configuration();
        c.setFileType((FileType)cbFileType.getSelectedItem());
        c.setFolder(tfFolder.getText());
        c.setFilename(tfFile.getText());
        IO.saveConfiguration("config.txt", c);
        
        File tempFolder = new File(tfFolder.getText().concat(File.separator).concat("temp"));
        if(tempFolder.exists() == false){
            tempFolder.delete();
        }

        // Quitter l'application
        System.exit(0);
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFolderActionPerformed
        // Choisir un dossier
        fcFolder.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int z = fcFolder.showOpenDialog(this);
        if(z == JFileChooser.APPROVE_OPTION){
            File folder = fcFolder.getSelectedFile();
            tfFolder.setText(folder.getPath());
            File tempFolder = new File(folder.getAbsolutePath().concat(File.separator).concat("temp"));
            if(tempFolder.exists() == false){
                tempFolder.mkdirs();
            }
        }
    }//GEN-LAST:event_btnFolderActionPerformed

    private void btnSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetActionPerformed
        // Définir la zone d'enregistrement
        try {
            SelectionFrame selfrm = new SelectionFrame();
            
            selfrm.addMouseListener(new MouseAdapter(){
                @Override
                public void mouseClicked(MouseEvent e) {
                    super.mouseClicked(e);
                    if(e.getButton() == MouseEvent.BUTTON3){
                        r = selfrm.getSelectedRegion();
                        System.out.println("r: " + r.toString());
                        selfrm.setVisible(false);
                        selfrm.dispose();
                    }
                }
            });
            
            // On cherche les dimensions de la résolution d'écran
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            Dimension screenDimension = toolkit.getScreenSize();
        
            Robot robot = new Robot();
            Rectangle robotRect = new Rectangle(screenDimension);
            BufferedImage image = robot.createScreenCapture(robotRect);
            selfrm.setImage(image);
            
            selfrm.setVisible(true);
        } catch (AWTException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSetActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // Commencer l'enregistrement
        File folder = new File(tfFolder.getText());
        if(folder.exists() == false) return;
        if(tfFile.getText().isEmpty()) return;
        
        Mixer.Info chosenInfo = null;
        for(Mixer.Info info : AudioSystem.getMixerInfo()){
            if(info.getName().equals(cbDevice.getSelectedItem().toString())){
                chosenInfo = info;
                break;
            }
        }

        if(chosenInfo == null) return;
        
//        TransparentDialog dialog = new TransparentDialog(this, true);
//        dialog.setLocationRelativeTo(null);
//        dialog.setVisible(true);
//        
//        if(dialog.isReturned() == true){
//            r = dialog.getSelectedRegion();
//        }
        
        btnStop.setEnabled(true);
        btnStart.setEnabled(false);
        btnSet.setEnabled(false);
        btnQuit.setEnabled(false);
        
//        cAudio = new CaptureAudio(chosenInfo, folder);
//        cVideo = new CaptureVideo(r.x, r.y, r.width, r.height, folder);
//        cAudio.startCapture();
//        cVideo.startCapture();

        cAV = new CaptureAV(
                new File(folder, tfFile.getText() + "." + ((FileType)cbFileType.getSelectedItem()).toString().toLowerCase()),
                r,
                chosenInfo
        );
        
        cAV.startRecording();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // Arrêter l'enregistrement
//        if(cAudio != null && cVideo != null){
//            cAudio.stopCapture();
//            cVideo.stopCapture();
//            
//            File tempFolder = new File(tfFolder.getText().concat(File.separator).concat("temp"));
//            File wave = new File(tempFolder, "file.wav");
//            
//            File folder = new File(tfFolder.getText());
//            String ext = ((FileType)cbFileType.getSelectedItem()).toString().toLowerCase();        
//            File path = new File(folder, tfFile.getText() + "." + ext);
//            
//            
//            cAudio = null;
//            cVideo = null;
//        }
        
        if(cAV != null){
            cAV.stopRecording();
            cAV = null;
        }

        btnStart.setEnabled(true);
        btnStop.setEnabled(false);
        btnSet.setEnabled(true);
        btnQuit.setEnabled(true);
        
        JOptionPane.showMessageDialog(
                this,
                "Encodage fini !",
                "Fin de process",
                JOptionPane.INFORMATION_MESSAGE
        );
    }//GEN-LAST:event_btnStopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFolder;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnSet;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JComboBox<String> cbDevice;
    private javax.swing.JComboBox<String> cbFileType;
    private javax.swing.JFileChooser fcFolder;
    private javax.swing.JLabel lblDevice;
    private javax.swing.JLabel lblFile;
    private javax.swing.JLabel lblFileType;
    private javax.swing.JLabel lblFolder;
    private javax.swing.JPanel paramsPanel;
    private javax.swing.JTextField tfFile;
    private javax.swing.JTextField tfFolder;
    // End of variables declaration//GEN-END:variables
}
